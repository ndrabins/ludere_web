service cloud.firestore {
  match /databases/{database}/documents {

    // Make invite by email only

    match /users/{userID} {
        allow create, update, delete: if isOwner(userID);
        allow read: if isSignedIn();
    }

    match /privateUserData/{userID} {
      allow read, write: if isOwner(userID);
    }

    match /workspaces/{workspaceID} {
      allow read: if isSignedIn() && existingData().members[currentUser().uid] == true;
      allow create: if isSignedIn();
      allow delete: if isSignedIn() && existingData().workspaceOwner == currentUser().uid;
      allow update: if isSignedIn() && existingData().members[currentUser().uid] == true;

      match /teams/{teamID} {
        allow read: if isSignedIn() && existingData().members[currentUser().uid];
        allow create: if isSignedIn() && isMemberOfWorkspace(workspaceID);
        allow delete: if isSignedIn() && isMemberOfWorkspace(workspaceID);
        allow update: if isSignedIn() && isMemberOfTeam(workspaceID, teamID);

        match /announcements/{announcementID} {
          allow read, write: if isSignedIn()
            && isMemberOfTeam(workspaceID, teamID);
        }

        match /chat/{chatID} {
          allow read:
            if isSignedIn() && isMemberOfTeam(workspaceID, teamID);
          allow write:
            if isSignedIn() && isMemberOfTeam(workspaceID, teamID);
          match /messages/{messageID} {
            allow read: if isSignedIn() && isMemberOfTeam(workspaceID, teamID);
            allow create: if isOwner(incomingData().sentBy) && isMemberOfTeam(workspaceID, teamID);
            allow delete: if isOwner(existingData().sentBy) && isMemberOfTeam(workspaceID, teamID);
            allow update: if isOwner(existingData().sentBy) && isMemberOfTeam(workspaceID, teamID);
          }
        }

        match /workflow/{boardID} {
          allow read:
            if isSignedIn() && isMemberOfTeam(workspaceID, teamID);
          allow write:
            if isSignedIn() && isMemberOfTeam(workspaceID, teamID);

          match /lists/{listID} {
            allow read:
              if isSignedIn() && isMemberOfTeam(workspaceID, teamID);
            allow write:
              if isSignedIn() && isMemberOfTeam(workspaceID, teamID);
          }

          match /tasks/{taskID} {
            allow read:
              if isSignedIn() && isMemberOfTeam(workspaceID, teamID);
            allow write:
              if isSignedIn() && isMemberOfTeam(workspaceID, teamID);
          }

          match /tags/{tagID} {
            allow read:
              if isSignedIn() && isMemberOfTeam(workspaceID, teamID);
            allow write:
              if isSignedIn() && isMemberOfTeam(workspaceID, teamID);
          }
        }
      }
    }

    // FUNCTIONS
    function isOwner(userID) {
      return currentUser().uid == userID
    }

    function isMember(rsc) {
      return rsc.data.members[currentUser().uid];
    }

    function isMemberOfTeam(workspaceID, teamID) {
      return isMember(get(/databases/$(database)/documents/workspaces/$(workspaceID)/teams/$(teamID)));
    }

    function isMemberOfWorkspace(workspaceID) {
      return isMember(get(/databases/$(database)/documents/workspaces/$(workspaceID)));
    }

    function isSignedIn(){
      return request.auth.uid != null;
    }

    function existingData() {
      return resource.data;
    }

    function incomingData() {
      return request.resource.data;
    }

    function currentUser() {
      return request.auth;
    }
  }
}
